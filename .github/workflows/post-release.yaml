## Fom https://github.com/crate-ci/cargo-release/blob/master/.github/workflows/post-release.yml

name: Post-Release
on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  get-release-version:
    runs-on: ubuntu-latest
    outputs:
      rv: ${{ steps.get.outputs.version }}
    steps:
      - name: Get release version from tag
        id: get
        shell: bash
        run: |
          version="${GITHUB_REF#refs/tags/}"
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "New release version=${version}"

  build-ubuntu-package:
    runs-on: ubuntu-latest
    needs: get-release-version
    strategy:
      matrix:
        version: [20.04, 22.04]
        # TODO: add arm64 support.
        platform: [amd64]
        include:
          - platform: amd64
            platform_path: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4
      - name: Build package for ubuntu ${{ matrix.version }}
        shell: bash
        run: |
          docker image build \
            --build-arg UBUNTU_VERSION=${{ matrix.version }} \
            -t vsmtp-ubuntu-${{ matrix.version }}-${{ matrix.platform }} \
            -f docker/ubuntu/Dockerfile.${{ matrix.platform }} \
            docker/ubuntu

      - name: Run piuparts for ubuntu ${{ matrix.version }}
        shell: bash
        run: |
          docker run --privileged --name piuparts-ubuntu-${{ matrix.version }} \
            vsmtp-ubuntu-${{ matrix.version }}-${{ matrix.platform }}

      - name: Extract ubuntu ${{ matrix.version }} artifacts
        shell: bash
        run: |
          docker cp piuparts-ubuntu-${{ matrix.version }}:./vsmtp.deb \
            vsmtp_${{ needs.get-release-version.outputs.rv }}-ubuntu${{ matrix.version }}_${{ matrix.platform }}.deb

      - name: Archive ubuntu ${{ matrix.version }} artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vsmtp-ubuntu-${{ matrix.version }}-pkg
          path: |
            vsmtp_${{ needs.get-release-version.outputs.rv }}-ubuntu${{ matrix.version }}_${{ matrix.platform }}.deb

  build-debian-package:
    runs-on: ubuntu-latest
    needs: get-release-version
    strategy:
      matrix:
        # TODO: add arm64 support.
        platform: [amd64]
        include:
          - platform: amd64
            platform_path: x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v4
      - name: build for debian
        shell: bash
        run: |
          docker image build \
            -t vsmtp-debian-${{ matrix.platform }} \
            -f docker/debian/Dockerfile.${{ matrix.platform }} \
            docker/debian

      - name: run piuparts for debian
        shell: bash
        run: |
          docker run --privileged --name piuparts-debian \
            vsmtp-debian-${{ matrix.platform }}

      - name: Extract debian artifacts
        shell: bash
        run: |
          docker cp piuparts-debian:./vsmtp.deb \
            vsmtp_${{ needs.get-release-version.outputs.rv }}_${{ matrix.platform }}.deb

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: vsmtp-debian-pkg
          path: |
            vsmtp_${{ needs.get-release-version.outputs.rv }}_${{ matrix.platform }}.deb

  # TODO: add rpm support.
  # build-redhat-docker:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       version: [ubi8, ubi9]
  #     # TODO: add arm64 support.
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: build for redhat
  #       shell: bash
  #       run: |
  #         docker image build --build-arg REDHAT_VERSION=${{ matrix.version }}   \
  #           -t vsmtp-redhat-${{ matrix.version }}                               \
  #           docker/redhat

  create-release:
    needs: [get-release-version, build-ubuntu-package, build-debian-package]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all workflow artifacts
        uses: actions/download-artifact@v3

      - name: Generate release notes
        run: |
          ./.github/release-notes.py --tag ${{ needs.get-release-version.outputs.rv }} --output notes-${{ needs.get-release-version.outputs.rv }}.md
          cat notes-${{ needs.get-release-version.outputs.rv }}.md

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          body_path: notes-${{ needs.get-release-version.outputs.rv }}.md
          tag_name: ${{ needs.get-release-version.outputs.rv }}
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ./**/*.deb

  push-dockerhub:
    needs: get-release-version
    runs-on: ubuntu-latest
    steps:
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build, tag, and push
        uses: docker/build-push-action@v4.0.0
        with:
          push: true
          tags: "viridit/vsmtp:${{ needs.get-release-version.outputs.rv }}"
          platforms: linux/amd64,linux/arm64
          file: ./docker/Dockerfile
